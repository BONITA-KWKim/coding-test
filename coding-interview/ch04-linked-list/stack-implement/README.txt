# 스택구현법

Q. 스택 자료 구조에 대해 논하라. 연결 리스트, 또는 동적 배열을 활용하여 C로 스택을 구현해 보고 그 자료 구조를 사용한 이유를 설명하라. 완전하고 일관적이고 사용하기 편리한 스택 인터페이스를 설계하라.  

A. 스택은 {후입선출(LIFO)}의 구조를 가지는 자료구조입니다. {주요 연산으로는 PUSH, POP 연산}이 있습니다. PUSH는 스텍의 끝에 데이터를 입력하는 연산이고 POP은 스택의 끝에서 데이터를 가져오는 연산입니다.  
{태스크 관리에 유용하게 쓰이는 자료 구조}
스택의 구현 방븝은 주로 연결리스트와 동적배열 방법을 이용합니다.  
연결리스트는 스택의 크기변화에 유연한 장점이 있고 구현이 쉬운 반면 작은 데이터의 경우에는 오버헤드가 발생하여 속도가 느려질 가능성이 있습니다.  
동적 배열의 경우 스택의 구조로 인해 인덱스를 통한 임의 접근이 불가능하고 스택의 크기 변화에 어려운 점이 있습니다. 배열의 크기만 적절히 선정한다면 일반적으로 오버헤드가 발생하지 않기 때문에 연결리스트보다 속도가 빠른 장점이 있습니다.
주요 루틴은 bool push(Element **stack, void *data);, bool pop(Element **stack, void **data);, bool createStack(Element **stack);, void removeStack(Element **stack); 이 있습니다.
